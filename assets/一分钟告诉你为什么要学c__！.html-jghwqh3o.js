const n=JSON.parse('{"key":"v-26d5537b","path":"/%E5%8D%9A%E6%96%87/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%B8%80%E5%88%86%E9%92%9F%E5%91%8A%E8%AF%89%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6c__%EF%BC%81.html","title":"一分钟告诉你为什么要学c++！","lang":"zh-CN","frontmatter":{"icon":"laptop-code","title":"一分钟告诉你为什么要学c++！","date":"2023-12-07T00:00:00.000Z","category":["编程语言"],"tag":["cpp"],"description":"很简单，因为c++有丰富的STL库，可以让我偷懒 举个栗子吧 这是我刚开始学平衡树的时候写的源码： #include&lt;cstdio&gt; #include&lt;algorithm&gt; #include&lt;cstdlib&gt; using namespace std; const int SIZE=100010; struct Treap{ \\tint l,r; \\tint val,dat; \\tint cnt,size; }a[SIZE]; int tot,root,n,INF=0x7fffffff; inline int New(int val){ \\ta[++tot].val=val; \\ta[tot].dat=rand(); \\ta[tot].cnt=a[tot].size=1; \\treturn tot; } inline void Update(int p){ \\ta[p].size=a[a[p].l].size+a[a[p].r].size+a[p].cnt; } inline void Build(){ \\troot=New(-INF); \\ta[root].r=New(INF); \\tUpdate(root); } int GetRankByVal(int p,int val){ \\tif(p==0)return -2; \\tif(val==a[p].val)return a[a[p].l].size+1; \\tif(val&lt;a[p].val)return GetRankByVal(a[p].l,val); \\treturn GetRankByVal(a[p].r,val)+a[a[p].l].size+a[p].cnt; } int GetValByRank(int p,int rank){ \\tif(p==0)return INF; \\tif(a[a[p].l].size&gt;=rank)return GetValByRank(a[p].l,rank); \\tif(a[a[p].l].size+a[p].cnt&gt;=rank)return a[p].val; \\treturn GetValByRank(a[p].r,rank-a[a[p].l].size-a[p].cnt); } void zig(int &amp;p){ \\tint q=a[p].l; \\ta[p].l=a[q].r;a[q].r=p;p=q; \\tUpdate(a[p].r);Update(p); } void zag(int &amp;p){ \\tint q=a[p].r; \\ta[p].r=a[q].l,a[q].l=p,p=q; \\tUpdate(a[p].l),Update(p); } void Insert(int &amp;p,int val){ \\tif(p==0){ \\t\\tp=New(val); \\t\\treturn; \\t} \\tif(val==a[p].val){ \\t\\ta[p].cnt++;Update(p); \\t\\treturn; \\t} \\tif(val&lt;a[p].val){ \\t\\tInsert(a[p].l,val); \\t\\tif(a[p].dat&lt;a[a[p].l].dat)zig(p); \\t} \\telse{ \\t\\tInsert(a[p].r,val); \\t\\tif(a[p].dat&lt;a[a[p].r].dat)zag(p); \\t} \\tUpdate(p); } int GetPre(int val){ \\tint ans=1; \\tint p=root; \\twhile(p){ \\t\\tif(val==a[p].val){ \\t\\t\\tif(a[p].l&gt;0){ \\t\\t\\t\\tp=a[p].l; \\t\\t\\t\\twhile(a[p].r&gt;0)p=a[p].r; \\t\\t\\t\\tans=p; \\t\\t\\t} \\t\\t\\tbreak; \\t\\t} \\t\\tif(a[p].val&lt;val&amp;&amp;a[p].val&gt;a[ans].val)ans=p; \\t\\tp=val&lt;a[p].val?a[p].l:a[p].r; \\t} \\treturn a[ans].val; } int GetNext(int val){ \\tint ans=2; \\tint p=root; \\twhile(p){ \\t\\tif(val==a[p].val){ \\t\\t\\tif(a[p].r&gt;0){ \\t\\t\\t\\tp=a[p].r; \\t\\t\\t\\twhile(a[p].l&gt;0)p=a[p].l; \\t\\t\\t\\tans=p; \\t\\t\\t} \\t\\t\\tbreak; \\t\\t} \\t\\tif(a[p].val&gt;val&amp;&amp;a[p].val&lt;a[ans].val)ans=p; \\t\\tp=val&lt;a[p].val?a[p].l:a[p].r; \\t} \\treturn a[ans].val; } void Remove(int &amp;p,int val){ \\tif(p==0)return; \\tif(val==a[p].val){ \\t\\tif(a[p].cnt&gt;1){ \\t\\t\\ta[p].cnt--; \\t\\t\\tUpdate(p); \\t\\t\\treturn; \\t\\t} \\t\\tif(a[p].l||a[p].r){ \\t\\t\\tif(a[p].r==0||a[a[p].l].dat&gt;a[a[p].r].dat) \\t\\t\\t \\tzig(p),Remove(a[p].r,val); \\t\\t\\telse \\t\\t\\t\\tzag(p),Remove(a[p].l,val); \\t\\t\\tUpdate(p); \\t\\t} \\t\\telse p=0; \\t\\treturn; \\t} \\tval&lt;a[p].val?Remove(a[p].l,val):Remove(a[p].r,val); \\tUpdate(p); } int main() { \\tsrand(20201017); \\tBuild(); \\tscanf(\\"%d\\",&amp;n); \\twhile(n--){ \\t\\tint opt,x; \\t\\tscanf(\\"%d%d\\",&amp;opt,&amp;x); \\t\\tswitch(opt){ \\t\\t\\tcase 1: \\t\\t\\t\\tInsert(root,x); \\t\\t\\t\\tbreak; \\t\\t\\tcase 2: \\t\\t\\t\\tRemove(root,x); \\t\\t\\t\\tbreak; \\t\\t\\tcase 3: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetRankByVal(root,x)-1); \\t\\t\\t\\tbreak; \\t\\t\\tcase 4: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetValByRank(root,x+1)); \\t\\t\\t\\tbreak; \\t\\t\\tcase 5: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetPre(x)); \\t\\t\\t\\tbreak; \\t\\t\\tcase 6: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetNext(x)); \\t\\t\\t\\tbreak; \\t\\t} \\t} \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://suc2005.github.io/%E5%8D%9A%E6%96%87/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%B8%80%E5%88%86%E9%92%9F%E5%91%8A%E8%AF%89%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6c__%EF%BC%81.html"}],["meta",{"property":"og:site_name","content":"苏畅的博客"}],["meta",{"property":"og:title","content":"一分钟告诉你为什么要学c++！"}],["meta",{"property":"og:description","content":"很简单，因为c++有丰富的STL库，可以让我偷懒 举个栗子吧 这是我刚开始学平衡树的时候写的源码： #include&lt;cstdio&gt; #include&lt;algorithm&gt; #include&lt;cstdlib&gt; using namespace std; const int SIZE=100010; struct Treap{ \\tint l,r; \\tint val,dat; \\tint cnt,size; }a[SIZE]; int tot,root,n,INF=0x7fffffff; inline int New(int val){ \\ta[++tot].val=val; \\ta[tot].dat=rand(); \\ta[tot].cnt=a[tot].size=1; \\treturn tot; } inline void Update(int p){ \\ta[p].size=a[a[p].l].size+a[a[p].r].size+a[p].cnt; } inline void Build(){ \\troot=New(-INF); \\ta[root].r=New(INF); \\tUpdate(root); } int GetRankByVal(int p,int val){ \\tif(p==0)return -2; \\tif(val==a[p].val)return a[a[p].l].size+1; \\tif(val&lt;a[p].val)return GetRankByVal(a[p].l,val); \\treturn GetRankByVal(a[p].r,val)+a[a[p].l].size+a[p].cnt; } int GetValByRank(int p,int rank){ \\tif(p==0)return INF; \\tif(a[a[p].l].size&gt;=rank)return GetValByRank(a[p].l,rank); \\tif(a[a[p].l].size+a[p].cnt&gt;=rank)return a[p].val; \\treturn GetValByRank(a[p].r,rank-a[a[p].l].size-a[p].cnt); } void zig(int &amp;p){ \\tint q=a[p].l; \\ta[p].l=a[q].r;a[q].r=p;p=q; \\tUpdate(a[p].r);Update(p); } void zag(int &amp;p){ \\tint q=a[p].r; \\ta[p].r=a[q].l,a[q].l=p,p=q; \\tUpdate(a[p].l),Update(p); } void Insert(int &amp;p,int val){ \\tif(p==0){ \\t\\tp=New(val); \\t\\treturn; \\t} \\tif(val==a[p].val){ \\t\\ta[p].cnt++;Update(p); \\t\\treturn; \\t} \\tif(val&lt;a[p].val){ \\t\\tInsert(a[p].l,val); \\t\\tif(a[p].dat&lt;a[a[p].l].dat)zig(p); \\t} \\telse{ \\t\\tInsert(a[p].r,val); \\t\\tif(a[p].dat&lt;a[a[p].r].dat)zag(p); \\t} \\tUpdate(p); } int GetPre(int val){ \\tint ans=1; \\tint p=root; \\twhile(p){ \\t\\tif(val==a[p].val){ \\t\\t\\tif(a[p].l&gt;0){ \\t\\t\\t\\tp=a[p].l; \\t\\t\\t\\twhile(a[p].r&gt;0)p=a[p].r; \\t\\t\\t\\tans=p; \\t\\t\\t} \\t\\t\\tbreak; \\t\\t} \\t\\tif(a[p].val&lt;val&amp;&amp;a[p].val&gt;a[ans].val)ans=p; \\t\\tp=val&lt;a[p].val?a[p].l:a[p].r; \\t} \\treturn a[ans].val; } int GetNext(int val){ \\tint ans=2; \\tint p=root; \\twhile(p){ \\t\\tif(val==a[p].val){ \\t\\t\\tif(a[p].r&gt;0){ \\t\\t\\t\\tp=a[p].r; \\t\\t\\t\\twhile(a[p].l&gt;0)p=a[p].l; \\t\\t\\t\\tans=p; \\t\\t\\t} \\t\\t\\tbreak; \\t\\t} \\t\\tif(a[p].val&gt;val&amp;&amp;a[p].val&lt;a[ans].val)ans=p; \\t\\tp=val&lt;a[p].val?a[p].l:a[p].r; \\t} \\treturn a[ans].val; } void Remove(int &amp;p,int val){ \\tif(p==0)return; \\tif(val==a[p].val){ \\t\\tif(a[p].cnt&gt;1){ \\t\\t\\ta[p].cnt--; \\t\\t\\tUpdate(p); \\t\\t\\treturn; \\t\\t} \\t\\tif(a[p].l||a[p].r){ \\t\\t\\tif(a[p].r==0||a[a[p].l].dat&gt;a[a[p].r].dat) \\t\\t\\t \\tzig(p),Remove(a[p].r,val); \\t\\t\\telse \\t\\t\\t\\tzag(p),Remove(a[p].l,val); \\t\\t\\tUpdate(p); \\t\\t} \\t\\telse p=0; \\t\\treturn; \\t} \\tval&lt;a[p].val?Remove(a[p].l,val):Remove(a[p].r,val); \\tUpdate(p); } int main() { \\tsrand(20201017); \\tBuild(); \\tscanf(\\"%d\\",&amp;n); \\twhile(n--){ \\t\\tint opt,x; \\t\\tscanf(\\"%d%d\\",&amp;opt,&amp;x); \\t\\tswitch(opt){ \\t\\t\\tcase 1: \\t\\t\\t\\tInsert(root,x); \\t\\t\\t\\tbreak; \\t\\t\\tcase 2: \\t\\t\\t\\tRemove(root,x); \\t\\t\\t\\tbreak; \\t\\t\\tcase 3: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetRankByVal(root,x)-1); \\t\\t\\t\\tbreak; \\t\\t\\tcase 4: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetValByRank(root,x+1)); \\t\\t\\t\\tbreak; \\t\\t\\tcase 5: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetPre(x)); \\t\\t\\t\\tbreak; \\t\\t\\tcase 6: \\t\\t\\t\\tprintf(\\"%d\\\\n\\",GetNext(x)); \\t\\t\\t\\tbreak; \\t\\t} \\t} \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-11T13:57:02.000Z"}],["meta",{"property":"article:author","content":"苏畅"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:published_time","content":"2023-12-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-11T13:57:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一分钟告诉你为什么要学c++！\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-11T13:57:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"苏畅\\"}]}"]]},"headers":[],"git":{"createdTime":1702303022000,"updatedTime":1702303022000,"contributors":[{"name":"suc2005","email":"suc536184@gmail.com","commits":1}]},"readingTime":{"minutes":2.93,"words":878},"filePathRelative":"博文/代码笔记/一分钟告诉你为什么要学c++！.md","localizedDate":"2023年12月7日","excerpt":"<p>很简单，因为c++有丰富的STL库，<s>可以让我偷懒</s></p>\\n<p>举个栗子吧</p>\\n<p>这是我刚开始学平衡树的时候写的源码：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;cstdio&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;algorithm&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;cstdlib&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> SIZE<span class=\\"token operator\\">=</span><span class=\\"token number\\">100010</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Treap</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span>r<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">,</span>dat<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> cnt<span class=\\"token punctuation\\">,</span>size<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>a<span class=\\"token punctuation\\">[</span>SIZE<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> tot<span class=\\"token punctuation\\">,</span>root<span class=\\"token punctuation\\">,</span>n<span class=\\"token punctuation\\">,</span>INF<span class=\\"token operator\\">=</span><span class=\\"token number\\">0x7fffffff</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">inline</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\ta<span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">++</span>tot<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">=</span>val<span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>tot<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>dat<span class=\\"token operator\\">=</span><span class=\\"token function\\">rand</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>tot<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>tot<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> tot<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">inline</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\ta<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">+</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">+</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">inline</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\troot<span class=\\"token operator\\">=</span><span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span>INF<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>root<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token operator\\">=</span><span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span>INF<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">GetRankByVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> p<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token operator\\">==</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">==</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> <span class=\\"token function\\">GetRankByVal</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">GetRankByVal</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">+</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">GetValByRank</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> p<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> rank<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token operator\\">==</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> INF<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">&gt;=</span>rank<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> <span class=\\"token function\\">GetValByRank</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">,</span>rank<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">+</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token operator\\">&gt;=</span>rank<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">GetValByRank</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">,</span>rank<span class=\\"token operator\\">-</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">-</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">zig</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> <span class=\\"token operator\\">&amp;</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> q<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>q<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">;</span>a<span class=\\"token punctuation\\">[</span>q<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token operator\\">=</span>p<span class=\\"token punctuation\\">;</span>p<span class=\\"token operator\\">=</span>q<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">zag</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> <span class=\\"token operator\\">&amp;</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> q<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">;</span>\\n\\ta<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>q<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">,</span>a<span class=\\"token punctuation\\">[</span>q<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token operator\\">=</span>p<span class=\\"token punctuation\\">,</span>p<span class=\\"token operator\\">=</span>q<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> <span class=\\"token operator\\">&amp;</span>p<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token operator\\">==</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\tp<span class=\\"token operator\\">=</span><span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">==</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\ta<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span><span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">Insert</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>dat<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>dat<span class=\\"token punctuation\\">)</span><span class=\\"token function\\">zig</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">Insert</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>dat<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>dat<span class=\\"token punctuation\\">)</span><span class=\\"token function\\">zag</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">GetPre</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> ans<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> p<span class=\\"token operator\\">=</span>root<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">==</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\tp<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>p<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\tans<span class=\\"token operator\\">=</span>p<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">&lt;</span>val<span class=\\"token operator\\">&amp;&amp;</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">&gt;</span>a<span class=\\"token punctuation\\">[</span>ans<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span>ans<span class=\\"token operator\\">=</span>p<span class=\\"token punctuation\\">;</span>\\n\\t\\tp<span class=\\"token operator\\">=</span>val<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">?</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token operator\\">:</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">[</span>ans<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">GetNext</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> ans<span class=\\"token operator\\">=</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> p<span class=\\"token operator\\">=</span>root<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">==</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\tp<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>p<span class=\\"token operator\\">=</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\tans<span class=\\"token operator\\">=</span>p<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">&gt;</span>val<span class=\\"token operator\\">&amp;&amp;</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>ans<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span>ans<span class=\\"token operator\\">=</span>p<span class=\\"token punctuation\\">;</span>\\n\\t\\tp<span class=\\"token operator\\">=</span>val<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">?</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token operator\\">:</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">[</span>ans<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> <span class=\\"token operator\\">&amp;</span>p<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token operator\\">==</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">==</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\ta<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>cnt<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token operator\\">||</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token operator\\">==</span><span class=\\"token number\\">0</span><span class=\\"token operator\\">||</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>dat<span class=\\"token operator\\">&gt;</span>a<span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>dat<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t \\t<span class=\\"token function\\">zig</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">else</span> \\n\\t\\t\\t\\t<span class=\\"token function\\">zag</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">else</span> p<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tval<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token operator\\">?</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>l<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>r<span class=\\"token punctuation\\">,</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">Update</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">srand</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">20201017</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">Build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">&amp;</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">int</span> opt<span class=\\"token punctuation\\">,</span>x<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d%d\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">&amp;</span>opt<span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">&amp;</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">switch</span><span class=\\"token punctuation\\">(</span>opt<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token number\\">1</span><span class=\\"token operator\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">Insert</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">,</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token number\\">2</span><span class=\\"token operator\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">,</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token number\\">3</span><span class=\\"token operator\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">GetRankByVal</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">,</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token number\\">4</span><span class=\\"token operator\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">GetValByRank</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">,</span>x<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token number\\">5</span><span class=\\"token operator\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">GetPre</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token number\\">6</span><span class=\\"token operator\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">GetNext</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
